{
    "patches": [
        {
            "label": "2025-10-26_01-15-06",
            "content": "@@ -1,2073 +0,0 @@\n-class Grafite:%0A    def __init__(self, calibre: float, dureza: str, tamanho: int):%0A        self.__calibre = calibre%0A        self.__dureza = dureza%0A        self.__tamanho = tamanho%0A%0A    def getCalibre(self) -%3E float:%0A        return self.__calibre%0A%0A    def getDureza(self) -%3E str:%0A        return self.__dureza%0A%0A    def getTamanho(self) -%3E int:%0A        return self.__tamanho%0A%0A    def setTamanho(self, value: int):%0A        self.__tamanho = value%0A%0A    def usagePerSheet(self) -%3E int:%0A        gasto = %7B%22HB%22: 1, %222B%22: 2, %224B%22: 4, %226B%22: 6%7D%0A        return gasto.get(getDureza(), 0)%0A%0A    def __str__(self):%0A        return f%22%7Bself.__calibre:.1f%7D:%7Bself.__dureza%7D:%7Bself.__tamanho%7D%22%0A%0Aclass Lapiseira:%0A    def __init__(self, calibre: float):%0A        self.__calibre = calibre%0A        self.__grafite: Grafite %7C None = None%0A%0A    def hasGrafite(self) -%3E bool:%0A        return self.__grafite is not None%0A    %0A    def insert(self, grafite: Grafite):%0A        if self.hasGrafite():%0A            print(%22J%C3%A1 existe grafite na lapiseira%22)%0A            return%0A        if grafite._Grafite__calibre != self.__calibre:%0A            print(%22Calibre incompat%C3%ADvel%22)%0A            return%0A            self.__grafite = grafite%0A%0A    def remove(self) -%3E Grafite %7C None:%0A        if not self.hasGrafite():%0A            print(%22fail: n%C3%A3o existe grafite na lapiseira%22)%0A            return None%0A        grafite = self.__grafite %0A        self.__grafite = None%0A        return grafite%0A%0A    def write(self):%0A        if not self.hasGrafite():%0A            print(%22fail: n%C3%A3o existe grafite na lapiseira%22)%0A            return%0A        if tamanho %3C= 10:%0A            print(%22fail: tamanho insuficiente de grafite%22)%0A            return %0A        if tamanho - gasto %3C 10:%0A            grafite.setTamanho(10)%0A            print(%22fail: folha incompleta%22)%0A            return%0A%0A        grafite.setTamanho(tamanho - gasto)%0A%0A%0A    def __str__(self):%0A        if self.__grafite:%0A            return f%22calibre:%7Bself.__calibre:.1f%7D, grafite:%7Bself.__grafite%7D%22%0A        else:%0A            return f%22calibre:%7Bself.__calibre:.1f%7D, grafite:(null)%22%0A%0Adef main():%0A%0Amain()%0A\n",
            "lines": "0"
        },
        {
            "label": "2025-10-26_01-44-31",
            "content": "@@ -2061,1174 +2061,8 @@\n n():\n-%0A    lapiseira = Lapiseira %7C None = None%0A    grafite = Grafite %7C None = None%0A%0A    while True:%0A        line = input()%0A        args = line.split()%0A        print(%22$%22 + line)%0A%0A        if args%5B0%5D == %22end%22:%0A            break%0A%0A        elif args%5B0%5D == %22init%22:%0A            lapiseira = Lapiseira(float(args%5B1%5D))%0A%0A        elif args%5B0%5D == %22inserir%22:%0A            if lapiseira is None:%0A                print(%22fail: lapiseira n%C3%A3o inicializada%22)%0A                continue%0A            grafite = Grafite (float(args%5B1%5D), args%5B2%5D, int(args%5B3%5D))%0A            lapiseira.insert(grafite)%0A%0A        elif args%5B0%5D == %22remover%22:%0A            if lapiseira is None:%0A                print(%22fail: lapiseira n%C3%A3o inicializada%22)%0A                continue%0A            grafite = lapiseira.remove()%0A%0A        elif args%5B0%5D == %22escrever%22:%0A            if lapiseira is None:%0A                print(%22fail: lapiseira n%C3%A3o inicializada%22)%0A                continue%0A            lapiseira.write()%0A%0A        elif args%5B0%5D == %22show%22:%0A            if lapiseira:%0A                print(lapiseira)%0A            else:%0A                print(%22fail: lapiseira n%C3%A3o inicializada%22)%0A        else:%0A            print(%22fail: comando inv%C3%A1lido%22)\n %0A%0Ama\n",
            "lines": "74"
        },
        {
            "label": "2025-10-26_01-57-27",
            "content": "@@ -2058,25 +2058,24 @@\n main():%0A    \n- \n lapiseira = \n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_01-57-47",
            "content": "@@ -2058,24 +2058,25 @@\n main():%0A    \n+ \n lapiseira: L\n@@ -2072,17 +2072,18 @@\n apiseira\n-:\n+ =\n  Lapisei\n@@ -2102,33 +2102,34 @@\n None%0A    grafite\n-:\n+ =\n  Grafite %7C None \n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_01-58-45",
            "content": "@@ -2007,17 +2007,16 @@\n calibre:\n- \n %7Bself.__\n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_01-58-54",
            "content": "@@ -2038,16 +2038,17 @@\n grafite:\n+(\n null)%22%0A%0A\n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_01-59-05",
            "content": "@@ -2042,16 +2042,17 @@\n ite:null\n+)\n %22%0A%0Adef m\n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_01-59-10",
            "content": "@@ -2038,17 +2038,16 @@\n grafite:\n- \n null%22%0A%0Ad\n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_01-59-17",
            "content": "@@ -3204,35 +3204,31 @@\n %22fail: c\n-alibre incompat%C3%ADvel\n+omando inv%C3%A1lido\n %22)%0A%0Amain\n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_02-00-10",
            "content": "@@ -3219,17 +3219,17 @@\n incompat\n-i\n+%C3%AD\n vel%22)%0A%0Am\n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_02-00-21",
            "content": "@@ -1096,17 +1096,17 @@\n  print(%22\n-c\n+C\n alibre i\n@@ -1112,17 +1112,17 @@\n incompat\n-i\n+%C3%AD\n vel%22)%0A  \n@@ -3208,23 +3208,27 @@\n l: c\n-omando inv%C3%A1lido\n+alibre incompativel\n %22)%0A%0A\n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_02-02-10",
            "content": "@@ -1096,22 +1096,16 @@\n  print(%22\n-fail: \n calibre \n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_02-02-33",
            "content": "@@ -973,16 +973,10 @@\n nt(%22\n-fail: ja\n+J%C3%A1\n  exi\n@@ -1952,17 +1952,16 @@\n grafite:\n-%5B\n %7Bself.__\n@@ -1968,17 +1968,16 @@\n grafite%7D\n-%5D\n %22%0A      \n@@ -2394,17 +2394,18 @@\n = %22inser\n-t\n+ir\n %22:%0A     \n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_02-04-34",
            "content": "@@ -1150,32 +1150,36 @@\n  return%0A        \n+    \n self.__grafite =\n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_02-05-41",
            "content": "@@ -627,17 +627,16 @@\n re:.1f%7D:\n- \n %7Bself.__\n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_02-05-52",
            "content": "@@ -1917,33 +1917,32 @@\n eturn f%22calibre:\n- \n %7Bself.__calibre:\n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_02-06-07",
            "content": "@@ -1956,17 +1956,16 @@\n grafite:\n- \n %5B%7Bself._\n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_02-06-16",
            "content": "@@ -627,16 +627,17 @@\n re:.1f%7D:\n+ \n %7Bself.__\n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_02-06-30",
            "content": "@@ -984,32 +984,45 @@\n a existe grafite\n+ na lapiseira\n %22)%0A            r\n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_02-06-46",
            "content": "@@ -2648,16 +2648,17 @@\n  %22remove\n+r\n %22:%0A     \n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_02-07-59",
            "content": "@@ -2835,21 +2835,24 @@\n %5B0%5D == %22\n-write\n+escrever\n %22:%0A     \n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_02-08-42",
            "content": "@@ -1497,17 +1497,17 @@\n %22fail: n\n-a\n+%C3%A3\n o existe\n@@ -1506,32 +1506,45 @@\n o existe grafite\n+ na lapiseira\n %22)%0A            r\n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_02-09-03",
            "content": "@@ -1263,33 +1263,33 @@\n   print(%22fail: n\n-a\n+%C3%A3\n o existe grafite\n@@ -1280,32 +1280,45 @@\n o existe grafite\n+ na lapiseira\n %22)%0A            r\n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_02-09-16",
            "content": "@@ -1526,130 +1526,8 @@\n turn\n-%0A%0A        grafite = self.__grafite%0A        tamanho = grafite.getTamanho()%0A        gasto = grafite.usagePerSheet()%0A        \n %0A   \n",
            "lines": "114"
        },
        {
            "label": "2025-10-26_02-11-11",
            "content": "@@ -1636,16 +1636,24 @@\n Sheet()%0A\n+        \n %0A       \n@@ -1754,21 +1754,8 @@\n rn %0A\n-            %0A\n     \n",
            "lines": "119"
        },
        {
            "label": "2025-10-26_02-11-12",
            "content": "@@ -549,21 +549,16 @@\n sto.get(\n-self.\n getDurez\n@@ -1742,16 +1742,28 @@\n return %0A\n+            \n %0A       \n",
            "lines": "120"
        },
        {
            "label": "2025-10-26_02-12-40",
            "content": "@@ -1713,16 +1713,27 @@\n ficiente\n+ de grafite\n %22)%0A     \n",
            "lines": "120"
        },
        {
            "label": "2025-10-26_02-12-58",
            "content": "class Grafite:\n    def __init__(self, calibre: float, dureza: str, tamanho: int):\n        self.__calibre = calibre\n        self.__dureza = dureza\n        self.__tamanho = tamanho\n\n    def getCalibre(self) -> float:\n        return self.__calibre\n\n    def getDureza(self) -> str:\n        return self.__dureza\n\n    def getTamanho(self) -> int:\n        return self.__tamanho\n\n    def setTamanho(self, value: int):\n        self.__tamanho = value\n\n    def usagePerSheet(self) -> int:\n        gasto = {\"HB\": 1, \"2B\": 2, \"4B\": 4, \"6B\": 6}\n        return gasto.get(self.getDureza(), 0)\n\n    def __str__(self):\n        return f\"{self.__calibre:.1f}:{self.__dureza}:{self.__tamanho}\"\n\nclass Lapiseira:\n    def __init__(self, calibre: float):\n        self.__calibre = calibre\n        self.__grafite: Grafite | None = None\n\n    def hasGrafite(self) -> bool:\n        return self.__grafite is not None\n    \n    def insert(self, grafite: Grafite):\n        if self.hasGrafite():\n            print(\"fail: ja existe grafite\")\n            return\n        if grafite._Grafite__calibre != self.__calibre:\n            print(\"fail: calibre incompativel\")\n            return\n        self.__grafite = grafite\n\n    def remove(self) -> Grafite | None:\n        if not self.hasGrafite():\n            print(\"fail: nao existe grafite\")\n            return None\n        grafite = self.__grafite \n        self.__grafite = None\n        return grafite\n\n    def write(self):\n        if not self.hasGrafite():\n            print(\"fail: nao existe grafite\")\n            return\n\n        grafite = self.__grafite\n        tamanho = grafite.getTamanho()\n        gasto = grafite.usagePerSheet()\n\n        if tamanho <= 10:\n            print(\"fail: tamanho insuficiente\")\n            return \n\n        if tamanho - gasto < 10:\n            grafite.setTamanho(10)\n            print(\"fail: folha incompleta\")\n            return\n\n        grafite.setTamanho(tamanho - gasto)\n\n\n    def __str__(self):\n        if self.__grafite:\n            return f\"calibre: {self.__calibre:.1f}, grafite: [{self.__grafite}]\"\n        else:\n            return f\"calibre: {self.__calibre:.1f}, grafite: null\"\n\ndef main():\n    lapiseira: Lapiseira | None = None\n    grafite: Grafite | None = None\n\n    while True:\n        line = input()\n        args = line.split()\n        print(\"$\" + line)\n\n        if args[0] == \"end\":\n            break\n\n        elif args[0] == \"init\":\n            lapiseira = Lapiseira(float(args[1]))\n\n        elif args[0] == \"insert\":\n            if lapiseira is None:\n                print(\"fail: lapiseira n\u00e3o inicializada\")\n                continue\n            grafite = Grafite (float(args[1]), args[2], int(args[3]))\n            lapiseira.insert(grafite)\n\n        elif args[0] == \"remove\":\n            if lapiseira is None:\n                print(\"fail: lapiseira n\u00e3o inicializada\")\n                continue\n            grafite = lapiseira.remove()\n\n        elif args[0] == \"write\":\n            if lapiseira is None:\n                print(\"fail: lapiseira n\u00e3o inicializada\")\n                continue\n            lapiseira.write()\n\n        elif args[0] == \"show\":\n            if lapiseira:\n                print(lapiseira)\n            else:\n                print(\"fail: lapiseira n\u00e3o inicializada\")\n        else:\n            print(\"fail: comando inv\u00e1lido\")\n\nmain()\n",
            "lines": "120"
        }
    ]
}